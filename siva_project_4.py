# -*- coding: utf-8 -*-
"""SIVA PROJECT 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NzHXpqociL87DipLkDR_GlD3tgMyYRBw
"""

# Install required libraries
!pip install yfinance plotly --quiet

# Import libraries
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import numpy as np
import seaborn as sns

# Define start and end date
start_date = "2019-01-01"
end_date = "2023-07-31"

tickers = [
    # Tech Giants
    "AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "NVDA", "META", "ORCL", "IBM", "INTC", "CRM", "ADBE", "AMD", "AVGO", "QCOM", "MU", "TXN",

    # Healthcare
    "JNJ", "PFE", "MRK", "UNH", "ABBV", "BMY", "LLY", "CVS", "GILD", "ZBH",

    # Consumer & Retail
    "WMT", "COST", "TGT", "PG", "PEP", "KO", "MCD", "NKE", "SBUX", "HD", "LOW", "UL", "KHC", "CL", "MDLZ",

    # Financials
    "JPM", "BAC", "WFC", "GS", "AXP", "C", "MS", "TFC", "SCHW", "V", "MA", "PYPL",

    # Energy & Utilities
    "XOM", "CVX", "BP", "TTE",  # ← TTE replaces TOT
    "DUK", "SO", "NEE", "ENB", "SHEL", "EPD",

    # Industrials
    "BA", "CAT", "GE", "HON", "LMT", "UPS", "FDX", "MMM", "DE",

    # International (ADRs + Global Leaders)
    "BABA", "TM", "NSANY", "SONY",  # ← SONY replaces SNE
    "TCEHY", "TD", "RY", "SHOP", "INFY", "TSM", "NIO", "VALE", "HSBC", "VOD",

    # ETFs (Benchmarking)
    "SPY", "QQQ", "DIA", "ARKK", "VTI", "VOO", "XLK", "XLF", "XLE", "XLV", "XLY",

    # Cryptos
    "BTC-USD", "ETH-USD", "DOGE-USD", "SOL-USD", "ADA-USD", "BNB-USD", "XRP-USD", "MATIC-USD"
]

# Dictionary to store stock data
stock_data = {}
monthly_data = {}

# Download and process each stock
for ticker in tickers:
    try:
        stock = yf.Ticker(ticker)
        df = stock.history(start=start_date, end=end_date)

        # Skip empty DataFrames
        if df.empty:
            print(f"⚠️ Skipping {ticker} — no data available.")
            continue

        df.reset_index(inplace=True)

        # Proceed only if 'Date' is present and a datetime
        if 'Date' in df.columns:
            df['MA30'] = df['Close'].rolling(window=30).mean()
            df['Daily Return'] = df['Close'].pct_change()
            df['Volatility'] = df['Daily Return'].rolling(window=30).std()
            stock_data[ticker] = df

            df_monthly = df.set_index("Date").resample("ME").agg({
                'Open': 'first',
                'High': 'max',
                'Low': 'min',
                'Close': 'last'
                }).dropna()


            df_monthly['Monthly Return'] = df_monthly['Close'].pct_change()
            monthly_data[ticker] = df_monthly
        else:
            print(f"Skipping {ticker} — 'Date' column missing.")
    except Exception as e:
        print(f"Error processing {ticker}: {e}")

# Plot Close Price & Moving Average
for ticker, df in stock_data.items():
    plt.figure(figsize=(20, 8))
    plt.plot(df['Date'], df['Close'], label='Close Price')
    plt.plot(df['Date'], df['MA30'], label='30-Day MA', linestyle='--')
    plt.title(f"{ticker} Close Price & 30-Day MA (2019–2023)")
    plt.xlabel("Date")
    plt.ylabel("Price (USD)")
    plt.legend()
    plt.grid(True)
    plt.show()

# Plot Volatility
for ticker, df in stock_data.items():
    plt.figure(figsize=(20, 8))
    plt.plot(df['Date'], df['Volatility'], color='orange', label='Volatility (30-Day)')
    plt.title(f"{ticker} Rolling Volatility (2019–2023)")
    plt.xlabel("Date")
    plt.ylabel("Volatility")
    plt.legend()
    plt.grid(True)
    plt.show()

plt.figure(figsize=(20, 8))
for ticker, df in stock_data.items():
    cumulative = (1 + df['Daily Return'].fillna(0)).cumprod()
    plt.plot(df['Date'], cumulative, label=ticker)
plt.title("Cumulative Returns (2019–2023)")
plt.xlabel("Date")
plt.ylabel("Growth of $1 Investment")
plt.legend()
plt.grid(True)
plt.show()


# Calculate Monthly Returns
monthly_data = {}

for ticker, df in stock_data.items():
    df['Date'] = df['Date'].dt.tz_localize(None)
    df['Month'] = df['Date'].dt.to_period('M').astype(str)  # Convert Period to string
    monthly_return = df.groupby('Month')['Close'].last().pct_change()
    monthly_df = pd.DataFrame({'Monthly Return': (monthly_return * 100).round(2)})
    monthly_df.index = pd.to_datetime(monthly_df.index)  # Optional: convert index to datetime for plotting
    monthly_data[ticker] = monthly_df


# Plot Monthly Returns
for ticker, df in monthly_data.items():
    plt.figure(figsize=(20, 8))
    plt.bar(df.index, df['Monthly Return'], color='green', label='Monthly Return')
    plt.title(f"{ticker} Monthly Returns (2019–2023)")
    plt.xlabel("Date")
    plt.ylabel("Return (%)")
    plt.legend()
    plt.grid(True)
    plt.show()

# Calculate Sharpe Ratios
sharpe_ratios = {}
risk_free_rate = 0.025  # Approximate annualized return for treasury

for ticker, df in stock_data.items():
    daily_return = df['Daily Return'].dropna()
    excess_return = daily_return.mean() - (risk_free_rate / 252)
    sharpe_ratio = excess_return / daily_return.std()
    sharpe_ratios[ticker] = sharpe_ratio * np.sqrt(252)  # Annualized

# Convert to DataFrame for plotting
sharpe_df = pd.DataFrame.from_dict(sharpe_ratios, orient='index', columns=['Sharpe Ratio'])
sharpe_df.sort_values(by='Sharpe Ratio', ascending=False, inplace=True)

# Plot Sharpe Ratios
plt.figure(figsize=(14, 6))
plt.bar(sharpe_df.index, sharpe_df['Sharpe Ratio'], color='purple')
plt.title('Annualized Sharpe Ratios (2019–2023)', fontsize=16)
plt.xlabel('Ticker')
plt.ylabel('Sharpe Ratio')
plt.grid(True, linestyle='--', alpha=0.5)
plt.axhline(0, color='black', linewidth=0.8)
plt.show()

# Correlation of Daily Returns
returns = pd.DataFrame({ticker: df['Daily Return'] for ticker, df in stock_data.items()})
corr_matrix = returns.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation of Daily Returns (2019–2023)")
plt.show()



risk_return_df = pd.DataFrame({
    'Average Return (%)': [df['Daily Return'].mean() * 100 * 252 for df in stock_data.values()],
    'Volatility (%)': [df['Daily Return'].std() * 100 * np.sqrt(252) for df in stock_data.values()]
}, index=stock_data.keys())

plt.figure(figsize=(12, 8))
plt.scatter(risk_return_df['Volatility (%)'], risk_return_df['Average Return (%)'], s=100)
for i, txt in enumerate(risk_return_df.index):
    plt.annotate(txt, (risk_return_df['Volatility (%)'].iloc[i], risk_return_df['Average Return (%)'].iloc[i]))
plt.xlabel("Volatility (Annualized %)")
plt.ylabel("Average Return (Annualized %)")
plt.title("Risk vs Return")
plt.grid(True)
plt.show()

for ticker, df in stock_data.items():
    df['Upper Band'] = df['MA30'] + 2 * df['Volatility']
    df['Lower Band'] = df['MA30'] - 2 * df['Volatility']
    plt.figure(figsize=(20, 8))
    plt.plot(df['Date'], df['Close'], label='Close Price')
    plt.plot(df['Date'], df['MA30'], label='30-Day MA', linestyle='--')
    plt.fill_between(df['Date'], df['Upper Band'], df['Lower Band'], color='gray', alpha=0.2, label='Bollinger Bands')
    plt.title(f"{ticker} Close Price, MA & Bollinger Bands (2019–2023)")
    plt.xlabel("Date")
    plt.ylabel("Price (USD)")
    plt.legend()
    plt.grid(True)
    plt.show()


from sklearn.decomposition import PCA
returns = pd.DataFrame({ticker: df['Daily Return'] for ticker, df in stock_data.items()}).dropna()
pca = PCA(n_components=2)
components = pca.fit_transform(returns)

plt.figure(figsize=(10, 6))
plt.scatter(components[:, 0], components[:, 1], alpha=0.5)
plt.title("PCA on Daily Returns")
plt.xlabel("Component 1")
plt.ylabel("Component 2")
plt.grid(True)
plt.show()

for ticker, df in stock_data.items():
    cumulative = (1 + df['Daily Return'].fillna(0)).cumprod()
    running_max = cumulative.cummax()
    drawdown = (cumulative - running_max) / running_max
    df['Drawdown'] = drawdown
plt.figure(figsize=(14, 5))
plt.plot(df['Date'], df['Drawdown'])
plt.title(f"{ticker} Drawdown (2019–2023)")
plt.xlabel("Date")
plt.ylabel("Drawdown (%)")
plt.grid(True)
plt.show()

for ticker, df in stock_data.items():
    df['Rolling Sharpe'] = df['Daily Return'].rolling(90).mean() / df['Daily Return'].rolling(90).std() * np.sqrt(252)
plt.figure(figsize=(14, 6))
plt.plot(df['Date'], df['Rolling Sharpe'])
plt.title(f"{ticker} 90-Day Rolling Sharpe Ratio")
plt.grid(True)
plt.show()


# Plot Candlestick Charts
for ticker, df in stock_data.items():
    required_cols = ['Open', 'High', 'Low', 'Close']
    if all(col in df.columns for col in required_cols):
        fig = go.Figure(data=[go.Candlestick(x=df['Date'],
                                             open=df['Open'],
                                             high=df['High'],
                                             low=df['Low'],
                                             close=df['Close'])])
        fig.update_layout(title=f"{ticker} Candlestick Chart (2019–2023)",
                          xaxis_title="Date",
                          yaxis_title="Price (USD)")
        fig.show()
    else:
        print(f"Skipping candlestick plot for {ticker} — missing OHLC data.")


summary_df = pd.DataFrame({
    'Sharpe Ratio': [sharpe_ratios[t] for t in stock_data],
    'Average Return (%)': [df['Daily Return'].mean() * 100 * 252 for df in stock_data.values()],
    'Volatility (%)': [df['Daily Return'].std() * 100 * np.sqrt(252) for df in stock_data.values()]
}, index=stock_data.keys())

summary_df = summary_df.round(2)
summary_df.sort_values(by='Sharpe Ratio', ascending=False, inplace=True)

top_sharpe = summary_df.head(10)

plt.figure(figsize=(14, 6))
plt.bar(top_sharpe.index, top_sharpe['Sharpe Ratio'], color='mediumseagreen')
plt.title('Top 10 Stocks by Sharpe Ratio (2019–2023)', fontsize=14)
plt.ylabel('Sharpe Ratio')
plt.grid(True, linestyle='--', alpha=0.6)
plt.axhline(0, color='black', linewidth=0.8)
plt.xticks(rotation=45)
plt.show()

cumulative_returns = {
    ticker: (1 + df['Daily Return'].fillna(0)).prod() - 1
    for ticker, df in stock_data.items()
}

top_cumulative = pd.DataFrame.from_dict(cumulative_returns, orient='index', columns=['Cumulative Return'])
top_cumulative = top_cumulative.sort_values(by='Cumulative Return', ascending=False).head(10).round(2)

plt.figure(figsize=(14, 6))
plt.bar(top_cumulative.index, top_cumulative['Cumulative Return'] * 100, color='steelblue')
plt.title("Top 10 Stocks by Total Cumulative Return (2019–2023)", fontsize=14)
plt.ylabel("Total Return (%)")
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(rotation=45)
plt.show()


plt.figure(figsize=(12, 8))
scatter = plt.scatter(summary_df['Volatility (%)'], summary_df['Average Return (%)'],
                      c=summary_df['Sharpe Ratio'], cmap='viridis', s=100, alpha=0.75)

for i, txt in enumerate(summary_df.index[:20]):
    plt.annotate(txt, (summary_df['Volatility (%)'].iloc[i], summary_df['Average Return (%)'].iloc[i]), fontsize=9)

plt.xlabel("Volatility (Annualized %)")
plt.ylabel("Average Return (Annualized %)")
plt.title(" Sharpe vs Return vs Volatility (Top 20 Annotated)", fontsize=14)
plt.colorbar(scatter, label="Sharpe Ratio")
plt.grid(True)
plt.show()


top_5 = summary_df.head(5)
print("\n Top 5 Best Performing Assets (Based on Sharpe Ratio):\n")
for i, (ticker, row) in enumerate(top_5.iterrows(), 1):
    print(f"{i}. {ticker}")
    print(row)
    print("-" * 40)


summary_df.to_csv("stock_performance_summary.csv")
print("\n Summary saved to 'stock_performance_summary.csv'")